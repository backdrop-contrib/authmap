<?php

/**
 * @file
 * authmap module for Backdrop.
 *
 * [DX] Contrib modules broken because of the removal of the authmap table.
 * https://github.com/backdrop/backdrop-issues/issues/2377
 *
 * See change record when it was removed from Drupal 8.x and inherited by
 * Backdrop. https://www.drupal.org/node/1863874.
 *
 */

 /**
 * Discover which external authentication module(s) authenticated a username.
 *
 * @param $authname
 *   A username used by an external authentication module.
 * @return
 *   An associative array with module as key and username as value.
 */
function authmap_get_authmaps($authname = NULL) {
  $authmaps = db_query("SELECT module, authname FROM {authmap} WHERE authname = :authname", array(
    ':authname' => $authname,
  ))
    ->fetchAllKeyed();
  return count($authmaps) ? $authmaps : 0;
}

/**
 * Fetches a user object based on an external authentication source.
 *
 * @param string $authname
 *   The external authentication username.
 *
 * @return
 *   A fully-loaded user object if the user is found or FALSE if not found.
 */
function authmap_external_load($authname) {
  $uid = db_query("SELECT uid FROM {authmap} WHERE authname = :authname", array(
    ':authname' => $authname,
  ))
    ->fetchField();
  if ($uid) {
    return user_load($uid);
  }
  else {
    return FALSE;
  }
}

/**
 * Save mappings of which external authentication module(s) authenticated
 * a user. Maps external usernames to user ids in the users table.
 *
 * @param $account
 *   A user object.
 * @param $authmaps
 *   An associative array with a compound key and the username as the value.
 *   The key is made up of 'authname_' plus the name of the external authentication
 *   module.
 * @see authmap_external_login_register()
 */
function authmap_set_authmaps($account, $authmaps) {
  foreach ($authmaps as $key => $value) {
    $module = explode('_', $key, 2);
    if ($value) {
      db_merge('authmap')
        ->key(array(
          'uid' => $account->uid,
          'module' => $module[1],
        ))
        ->fields(array(
          'authname' => $value,
        ))
        ->execute();
    }
    else {
      db_delete('authmap')
        ->condition('uid', $account->uid)
        ->condition('module', $module[1])
        ->execute();
    }
  }
}

/**
 * Helper function for authentication modules. Either logs in or registers
 * the current user, based on username. Either way, the global $user object is
 * populated and login tasks are performed.
 */
function authmap_external_login_register($name, $module) {
  $account = authmap_external_load($name);
  if (!$account) {

    // Register this new user.
    $userinfo = array(
      'name' => $name,
      'mail' => $name,
      'pass' => user_password(),
      'init' => $name,
      'status' => 1,
      'access' => REQUEST_TIME,
      'is_new' => TRUE,
    );
    $account = entity_create('user', $userinfo);
    $account->save();

    // Terminate if an error occurred during $account->save().
    if (!$account) {
      backdrop_set_message(t("Error saving user account."), 'error');
      return;
    }
    authmap_set_authmaps($account, array(
      "authname_{$module}" => $name,
    ));
  }

  // Log user in.
  $form_state['uid'] = $account->uid;
  user_login_submit(array(), $form_state);
}
